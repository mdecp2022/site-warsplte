<h1>About</h1>
<p>cmsite: wcms use <a href="https://github.com/mdecycu/cmsimde">https://github.com/mdecycu/cmsimde</a> as submodule</p>
<h1>Brython</h1>
<p><a href="https://en.wikipedia.org/wiki/Python_(programming_language)">https://en.wikipedia.org/wiki/Python_(programming_language)</a></p>
<h4>Examples:</h4>
<p style="padding-left: 30px;"><a href="https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d">https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d</a></p>
<p style="padding-left: 30px;"><a href="https://www.geeksforgeeks.org/python-programming-examples/">https://www.geeksforgeeks.org/python-programming-examples/</a></p>
<p style="padding-left: 30px;"><a href="https://www.programiz.com/python-programming/examples">https://www.programiz.com/python-programming/examples</a></p>
<p style="padding-left: 30px;"><a href="https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/">https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/</a></p>
<h4>Python Tutorial:</h4>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/">https://docs.python.org/3/tutorial/</a></p>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/introduction.html">An informal introduction to Python</a></p>
<h4>Indentation</h4>
<h4>Variables</h4>
<h4>Comments</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#numbers">Numbers</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#strings">Strings</a></h4>
<h4>print</h4>
<p><a href="https://docs.python.org/3/tutorial/controlflow.html">Python control flow tools</a></p>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements">for</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#if-statements">if</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#the-range-function">range</a></h4>
<h4>open</h4>
<h4>read</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#lists">lists</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences">tuples</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries">dictionaries</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions">functions</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/errors.html#exceptions">try ... except</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops">break</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#pass-statements">pass</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/classes.html?highlight=classes">classes</a></h4>
<p>這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 (<a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件).</p>
<p><a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用.</p>
<p>亦即將所有對應的 html 也使用 Brython 產生, 然後寫為 <a href="https://docs.python.org/3/tutorial/classes.html">class</a> 後, 在範例導入時透過 <a href="https://docs.python.org/3/tutorial/classes.html#instance-objects">instance</a> 引用.</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
&lt;/script&gt;</pre>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p>將 iterable 與 iterator <a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438">相關說明</a>, 利用 Brython 與 Ace Editor 整理在這個頁面.</p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<h1>HW</h1>
<h2>w11</h2>
<h2>w12</h2>
<h2>w13</h2>
<p>華氏 = 9/5*攝氏+32</p>
<p>攝氏 = (華氏-32)* 5/9</p>
<p>溫度轉換範例</p>
<h2>w14</h2>
<p>缺考人員名單</p>
<p>程式</p>
<div style="box-sizing: border-box; font-family: 'Cascadia Mono', Consolas, ui-monospace, Menlo, Monaco, monospace; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; text-align: start; text-indent: 0px; text-transform: none; white-space: pre; word-spacing: 0px;">
<pre><span class="cm-line"><span class="cm-comment"># 導入 ast 模組是希望利用其 literal_eval() 將 dict 格式的字串轉為 dict 資料型別</span>
</span><span class="cm-line"><span class="cm-comment"># 以利隨後的取值運算</span>
</span><span class="cm-line"><span class="cm-keyword">import</span> <span class="cm-variable">ast</span>
</span><span class="cm-line">
</span><span class="cm-line"><span class="cm-comment"># 定義一個函式, 以班級代號字串作為輸入, 可以傳回各班修課學員的學號數列</span>
</span><span class="cm-line"><span class="cm-keyword">def</span> <span class="cm-def">get_stud</span>(<span class="cm-variable">c_name</span>):
</span><span class="cm-line">    <span class="cm-comment"># 將課程的班級代號字串作為 dict 的 key, 而 2022 fall 的課程代號作為對應值</span>
</span><span class="cm-line">    <span class="cm-comment"># 使用者可以利用班級代號從 courses dict 取出課程代號</span>
</span><span class="cm-line">    <span class="cm-variable">courses</span> <span class="cm-operator">=</span> {<span class="cm-string">"1a"</span>: <span class="cm-string">"0747"</span>, <span class="cm-string">"1b"</span>: <span class="cm-string">"0761"</span>, <span class="cm-string">"2a"</span>: <span class="cm-string">"0773"</span>, <span class="cm-string">"2b"</span>: <span class="cm-string">"0786"</span>}
</span><span class="cm-line">    <span class="cm-comment"># 利用 c_name 從 courses 得到該學期的課程代號</span>
</span><span class="cm-line">    <span class="cm-variable">c</span> <span class="cm-operator">=</span> <span class="cm-variable">courses</span>[<span class="cm-variable">c_name</span>]
</span><span class="cm-line">    <span class="cm-comment"># 利用課程代號從學校教務主機取的該班修課人員名單</span>
</span><span class="cm-line">    <span class="cm-variable">url</span> <span class="cm-operator">=</span> <span class="cm-string">"https://nfu.cycu.org/?semester=1111&amp;courseno="</span> <span class="cm-operator">+</span> <span class="cm-variable">c</span> <span class="cm-operator">+</span> <span class="cm-string">"&amp;column=True"</span>
</span><span class="cm-line">    <span class="cm-comment"># 讀出各修課人員資料後, 以跳行符號切割, 得到的 data 為數列</span>
</span><span class="cm-line">    <span class="cm-variable">data</span> <span class="cm-operator">=</span> <span class="cm-builtin">open</span>(<span class="cm-variable">url</span>).<span class="cm-property">read</span>().<span class="cm-property">split</span>(<span class="cm-string">"\n"</span>)
</span><span class="cm-line">    <span class="cm-comment"># 因為最後一筆資料為空字串, 因此利用數列運算將其去除</span>
</span><span class="cm-line">    <span class="cm-variable">stud</span> <span class="cm-operator">=</span> <span class="cm-variable">data</span>[:<span class="cm-operator">-</span><span class="cm-number">1</span>]
</span><span class="cm-line">    <span class="cm-comment"># get_stud() 函式最後將對應班級的修課人員學號以數列格式傳回</span>
</span><span class="cm-line">    <span class="cm-keyword">return</span> <span class="cm-variable">stud</span>
</span><span class="cm-line">
</span><span class="cm-line"><span class="cm-comment"># 利用 "1b" 作為輸入從 get_stud() 取出該班修課學員學號數列</span>
</span><span class="cm-line"><span class="cm-variable">cp_stud</span> <span class="cm-operator">=</span> <span class="cm-variable">get_stud</span>(<span class="cm-string">"1b"</span>)
</span><span class="cm-line">
</span><span class="cm-line"><span class="cm-comment"># get w14 quiz result</span>
</span><span class="cm-line"><span class="cm-comment"># # 以下為 1b w14 quiz 考試結果的 JSON 檔案</span>
</span><span class="cm-line"><span class="cm-variable">cp_w10_quiz_url</span> <span class="cm-operator">=</span> <span class="cm-string">"</span></span><span class="cm-line">https://gist.githubusercontent.com/mdecycu/9df4b372ac1b7386cf259ced15f1a2b2/raw/a0be253dc36fb3d0d2e1878950dae0b13d07a8f6/2022_1208_cp_w14_1b_quiz.json"
</span><span class="cm-line"><span class="cm-keyword">def</span> <span class="cm-def">get_score</span>(<span class="cm-variable">url</span>):
</span><span class="cm-line">    <span class="cm-comment"># 利用 open() 與 read() 讀取考試結果 JSON 檔案</span>
</span><span class="cm-line">    <span class="cm-variable">json_data</span> <span class="cm-operator">=</span> <span class="cm-builtin">open</span>(<span class="cm-variable">url</span>).<span class="cm-property">read</span>()
</span><span class="cm-line">    <span class="cm-comment"># 利用 ast.literal_eval() 將字串 dict, 轉為程式可用的 dict 資料型別</span>
</span><span class="cm-line">    <span class="cm-variable">big_dict</span> <span class="cm-operator">=</span> <span class="cm-variable">ast</span>.<span class="cm-property">literal_eval</span>(<span class="cm-variable">json_data</span>)
</span><span class="cm-line">    <span class="cm-comment"># 從 big_dict 中, 取出 body 中的 testuser 欄位資料</span>
</span><span class="cm-line">    <span class="cm-variable">data</span> <span class="cm-operator">=</span> <span class="cm-variable">big_dict</span>[<span class="cm-string">"body"</span>][<span class="cm-string">"testuser"</span>]
</span><span class="cm-line">    <span class="cm-comment"># 定義一個空 dict 資料變數, 隨後利用迴圈逐一將學號作為 key, 考試成績為 valude</span>
</span><span class="cm-line">    <span class="cm-comment"># 組成 quiz_dict 的資料內容, 以便之後可以用學號當作輸入, 取得該員考試成績</span>
</span><span class="cm-line">    <span class="cm-variable">quiz_dict</span> <span class="cm-operator">=</span> {}
</span><span class="cm-line">    <span class="cm-keyword">for</span> <span class="cm-variable">i</span> <span class="cm-keyword">in</span> <span class="cm-variable">data</span>:
</span><span class="cm-line">        <span class="cm-comment"># data 資料中的 user_name 為考試學員的帳號, 也就是學號</span>
</span><span class="cm-line">        <span class="cm-variable">stud_id</span> <span class="cm-operator">=</span> <span class="cm-variable">data</span>[<span class="cm-variable">i</span>][<span class="cm-string">"user_name"</span>]
</span><span class="cm-line">        <span class="cm-comment"># data 資料中的 total_score 欄位為考試成績</span>
</span><span class="cm-line">        <span class="cm-comment"># 因為考試成績為字串, 先轉為浮點數後, 再轉為整數</span>
</span><span class="cm-line">        <span class="cm-variable">stud_score</span> <span class="cm-operator">=</span> <span class="cm-builtin">int</span>(<span class="cm-builtin">float</span>(<span class="cm-variable">data</span>[<span class="cm-variable">i</span>][<span class="cm-string">"total_score"</span>]))
</span><span class="cm-line">        <span class="cm-comment"># 逐一以學號為 key, 考試成績為對應 value, 將資料放入 quiz_dict</span>
</span><span class="cm-line">        <span class="cm-variable">quiz_dict</span>[<span class="cm-variable">stud_id</span>] <span class="cm-operator">=</span> <span class="cm-variable">stud_score</span>
</span><span class="cm-line">    <span class="cm-comment"># 取得各學員的考試成績 quiz_dict 後, 將資料傳回</span>
</span><span class="cm-line">    <span class="cm-keyword">return</span> <span class="cm-variable">quiz_dict</span>
</span><span class="cm-line">
</span><span class="cm-line"><span class="cm-comment"># 從考試 JSON 檔案中取得考試結果的字典資料</span>
</span><span class="cm-line"><span class="cm-variable">cp_quiz</span> <span class="cm-operator">=</span> <span class="cm-variable">get_score</span>(<span class="cm-variable">cp_w10_quiz_url</span>)
</span><span class="cm-line"><span class="cm-comment"># 設定一個空數列, 隨後將利用 append() 方法, 將缺考學員學號存入</span>
</span><span class="cm-line"><span class="cm-variable">cp_abs</span> <span class="cm-operator">=</span> []
</span><span class="cm-line"><span class="cm-comment"># 從修課學員數列中, 逐一按照學號次序, 以重複迴圈將學號對應至 stud 變數</span>
</span><span class="cm-line"><span class="cm-keyword">for</span> <span class="cm-variable">stud</span> <span class="cm-keyword">in</span> <span class="cm-variable">cp_stud</span>:
</span><span class="cm-line">    <span class="cm-comment"># 因為缺考學員在考試結果的 dict 中並無資料, 因此利用 try except 進行判斷</span>
</span><span class="cm-line">    <span class="cm-keyword">try</span>:
</span><span class="cm-line">        <span class="cm-comment"># 針對 stud 學號, 有考試成績者, 列出其學號與得分</span>
</span><span class="cm-line">        <span class="cm-builtin">print</span>(<span class="cm-variable">stud</span>, <span class="cm-variable">cp_quiz</span>[<span class="cm-variable">stud</span>])
</span><span class="cm-line">    <span class="cm-keyword">except</span>:
</span><span class="cm-line">        <span class="cm-comment"># 缺考者沒有 quiz 成績, 則在其成績欄位印出"缺"</span>
</span><span class="cm-line">        <span class="cm-builtin">print</span>(<span class="cm-variable">stud</span>, <span class="cm-string">"缺"</span>)
</span><span class="cm-line">        <span class="cm-comment"># 同時將缺考學員學號以 append() 方法逐一置入</span>
</span><span class="cm-line">        <span class="cm-variable">cp_abs</span>.<span class="cm-property">append</span>(<span class="cm-variable">stud</span>)
</span><span class="cm-line"><span class="cm-comment"># 列出缺考名單</span>
</span><span class="cm-line"><span class="cm-builtin">print</span>(<span class="cm-string">"="</span><span class="cm-operator">*</span><span class="cm-number">20</span>)
</span><span class="cm-line"><span class="cm-builtin">print</span>(<span class="cm-string">"以下為 w14 缺考名單:"</span>)
</span><span class="cm-line"><span class="cm-comment"># 因為 cp_abs 資料為 list, 在此利用 for 迴圈逐一列出</span>
</span><span class="cm-line"><span class="cm-keyword">for</span> <span class="cm-variable">stud</span> <span class="cm-keyword">in</span> <span class="cm-variable">cp_abs</span>:
</span><span class="cm-line">    <span class="cm-builtin">print</span>(<span class="cm-variable">stud</span>)</span></pre>
</div>
<p>以下為 w14 缺考名單:<br/>41123209<br/>41123211<br/>41123218<br/>41123219<br/>41123225<br/>41123227<br/>41123228<br/>41123232<br/>41123236<br/>41123240<br/>41123247<br/>&lt;completed in 953.00 ms&gt;</p>
<h2>w15</h2>
<div style="box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Web', sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;">
<ul>
<li>Q.為何學習計算機程式需要建立個人倉儲?</li>
<li>A.要學習自己如何架設網站。</li>
<li>Q.全球資訊網能夠甚麼功能或優點?</li>
<li>A.全球資訊網是人們在網路上進行互動和瀏覽器的主要工具，優點為可以輕鬆的搜尋到不同種類的資訊。</li>
<li>Q.Replit, stud.cycu.org 與 localhost 分別代表甚麼?</li>
<li>A.replit可以進行線上程式開發、stud.cycu.org是主機位置、localhost是主機名。</li>
<li>Q.https, ssh 到底提供使用者那些功能或優點?</li>
<li>A.https可以提升網站安全，ssh可以在不安全的網路中為網路服務提供安全的傳輸環境。</li>
<li>Q.Brython 與 Python 有甚麼差別?</li>
<li>A.</li>
<li>Q.能夠直接在瀏覽器中以 Brython 繪製中華民國國旗, 或模擬綠色方塊在方塊格點中任意移動, 代表甚麼?</li>
<li>A.</li>
<li>Q.變數, 字串, 整數, 浮點數, 數列, Tuple, Dictionary, 函式, 重複迴圈, class, 物件導向, 資料庫, 這些名詞對您而言代表甚麼?</li>
<li>A.</li>
</ul>
</div>
<p></p>
<!-- editor2 結束 --><hr/>